// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/schema/zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = false // default is true This will create an index.ts file in each sub folder that exports all the files in the folder. This option may be beneficial for typescript performance on big schemas.
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// @zod.import(["import { YYYYMMDDSchema } from '../../_schema';"])
model Todo {
  todo_id Int @id @default(autoincrement())

  yarukoto    String @unique @db.VarChar(100) /// @zod.string.trim().min(1).max(100)
  kizitu      String @default("") @db.VarChar(10) /// @zod.custom.use(YYYYMMDDSchema.or(z.literal('')))
  description String @default("") @db.VarChar(400) /// @zod.string.trim().max(400)

  created_at DateTime @default(now()) @db.DateTime(3)
  created_by Int
  updated_at DateTime @updatedAt @db.DateTime(3)
  updated_by Int

  @@index([kizitu])
  @@map("todo")
}

////////////////////////////////
// 汎用機能
////////////////////////////////

/// ユーザ
model User {
  user_id Int @id @default(autoincrement())

  email        String  @unique @db.VarChar(255) /// @zod.string.trim().min(1).max(255).email()
  password     String  @db.VarChar(255) /// @zod.string.trim().min(1).max(255)
  username     String  @db.VarChar(100) /// @zod.string.trim().min(1).max(100)
  description  String  @default("") @db.VarChar(400) /// @zod.string.trim().max(400)
  /// 二要素認証の有効化 `true`: 有効 / `false`: 無効
  twofa_enable Boolean @default(false)
  /// 二要素認証の秘密鍵
  twofa_secret String  @default("") @db.VarChar(255) /// @zod.string.trim().max(255)

  created_at DateTime @default(now()) @db.DateTime(3)
  updated_at DateTime @updatedAt @db.DateTime(3)

  session_list Session[]
  file_list    File[]

  @@index([username], name: "index_username")
  @@map("user")
}

model Session {
  session_id Int @id @default(autoincrement())

  session_key    String    @unique @db.VarChar(255)
  /// express-session
  originalMaxAge Int?
  expires        DateTime? @default(now()) @db.DateTime(3)
  /// custom
  user_id        Int?
  data           String    @default("{}")

  user User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  created_at DateTime @default(now()) @db.DateTime(3)
  updated_at DateTime @updatedAt @db.DateTime(3)

  @@map("session")
}

model File {
  file_id  String @id @default(uuid()) @db.VarChar(191) /// @zod.string.uuid()
  filename String @db.VarChar(255) /// @zod.string.trim().min(1).max(255)
  mimetype String @db.VarChar(100) /// @zod.string.trim().min(1).max(100)
  size     Int

  created_at DateTime @default(now()) @db.DateTime(3)
  created_by Int
  updated_at DateTime @updatedAt @db.DateTime(3)
  updated_by Int

  user_list User[]

  @@map("file")
}
